@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> _signInManager
@inject UserManager<ApplicationUser> _userManager

@*
    @inject SignInManager<IdentityUser> SignInManager
    @inject UserManager<IdentityUser> UserManager
*@

<ul class="navbar-nav">
    @if (_signInManager.IsSignedIn(User)) {
        // if we are here, this means that the user is authenticated
        // read the user's data
        var userData = await _userManager.GetUserAsync(User);
        var userRoles = await _userManager.GetRolesAsync(userData);

        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Olá <b>@userData.Nome</b>!
            @* // *@
                @foreach(var item in userRoles ?? Enumerable.Empty<string>()) {
                    <i> - @item</i>
                }

            </a>
        </li>
        <li class="nav-item">
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Registo</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
